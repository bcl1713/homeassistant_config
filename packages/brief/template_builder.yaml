# packages/brief/template_builder.yaml
#
# Template Builder for Modular Briefing System
# Assembles prompts based on collected data and context
#

script:
  brief_build_prompt:
    alias: "Build Contextual Prompt"
    description: "Creates AI prompt based on collected data and current context"
    variables:
      is_morning: "{{ now().hour < 12 }}"
      is_afternoon: "{{ now().hour >= 12 and now().hour < 17 }}"
      is_evening: "{{ now().hour >= 17 }}"
      is_weekday: "{{ now().weekday() < 5 }}"
      current_time: "{{ now().strftime('%H:%M') }}"
    sequence:
      # Collect all the data modules
      - parallel:
          - service: script.brief_collect_chores
          - service: script.brief_collect_appliances  
          - service: script.brief_collect_calendar
          - service: script.brief_collect_garbage
          - service: script.brief_collect_meals
          - service: script.brief_collect_devices
          - service: script.brief_collect_commute
      
      # Wait a moment for MQTT messages to be processed
      - delay:
          seconds: 2
      
      # Get weather forecast
      - service: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: weather.forecast_home
        response_variable: hourly_forecast
      
      # Read collected data from MQTT sensor attributes
      - variables:
          chores_data: >
            {% set attrs = state_attr('sensor.brief_data_chores', 'daily') %}
            {% if attrs %}
              {{ dict(daily=attrs, weekend=state_attr('sensor.brief_data_chores', 'weekend')) }}
            {% else %}
              {}
            {% endif %}
          appliances_data: >
            {% set attrs = state_attr('sensor.brief_data_appliances', 'dishwasher') %}
            {% if attrs %}
              {{ dict(dishwasher=attrs) }}
            {% else %}
              {}
            {% endif %}
          calendar_data: >
            {% set events = state_attr('sensor.brief_data_calendar', 'events') %}
            {% if events %}
              {{ dict(events=events) }}
            {% else %}
              {'events': []}
            {% endif %}
          garbage_data: >
            {% set relevant = state_attr('sensor.brief_data_garbage', 'relevant') %}
            {% if relevant is not none %}
              {{
                dict(
                  relevant=relevant,
                  has_pickup_tomorrow=state_attr('sensor.brief_data_garbage', 'has_pickup_tomorrow'),
                  reminder_message=state_attr('sensor.brief_data_garbage', 'reminder_message')
                )
              }}
            {% else %}
              {}
            {% endif %}
          meals_data: >
            {% set has_today = state_attr('sensor.brief_data_meals', 'has_today') %}
            {% if has_today is not none %}
              {{
                dict(
                  has_today=has_today,
                  has_tomorrow=state_attr('sensor.brief_data_meals', 'has_tomorrow'),
                  today=state_attr('sensor.brief_data_meals', 'today'),
                  tomorrow=state_attr('sensor.brief_data_meals', 'tomorrow')
                )
              }}
            {% else %}
              {}
            {% endif %}
          devices_data: >
            {% set has_issues = state_attr('sensor.brief_data_devices', 'has_issues') %}
            {% if has_issues is not none %}
              {{
                dict(
                  has_issues=has_issues,
                  battery_count=state_attr('sensor.brief_data_devices', 'battery_count'),
                  offline_count=state_attr('sensor.brief_data_devices', 'offline_count')
                )
              }}
            {% else %}
              {}
            {% endif %}
          commute_data: >
            {% set relevant = state_attr('sensor.brief_data_commute', 'relevant') %}
            {% if relevant is not none %}
              {{
                dict(
                  relevant=relevant,
                  brian_time=state_attr('sensor.brief_data_commute', 'brian_time'),
                  hester_time=state_attr('sensor.brief_data_commute', 'hester_time')
                )
              }}
            {% else %}
              {}
            {% endif %}
      
      # Build contextual sections
      - variables:
          prompt_sections: >
            {% set ns = namespace(sections=[]) %}
            
            {# Base instructions with date/time context #}
            {% set ns.sections = ns.sections + ['Instructions for generating home status briefs:'] %}
            {% set ns.sections = ns.sections + ['- Create a concise, conversational brief'] %}
            {% set ns.sections = ns.sections + ['- Avoid technical terms and Home Assistant terminology'] %}
            {% set ns.sections = ns.sections + ['- Round numbers naturally (say "around 3" instead of "2.87")'] %}
            {% set ns.sections = ns.sections + ['- Response should be close to but less than 255 characters'] %}
            {% set ns.sections = ns.sections + ['- Only mention events in next 4 hours'] %}
            {% set ns.sections = ns.sections + [''] %}
            {% set ns.sections = ns.sections + ['CURRENT DATE/TIME CONTEXT:'] %}
            {% set ns.sections = ns.sections + ['- Current date: ' + now().strftime('%A, %B %d, %Y')] %}
            {% set ns.sections = ns.sections + ['- Current time: ' + current_time] %}
            {% set ns.sections = ns.sections + ['- Today is: ' + now().strftime('%A')] %}
            {% set ns.sections = ns.sections + ['- Tomorrow is: ' + (now() + timedelta(days=1)).strftime('%A, %B %d')] %}
            {% set ns.sections = ns.sections + ['- Time of day: ' + ('morning' if is_morning else 'afternoon' if is_afternoon else 'evening')] %}
            {% set ns.sections = ns.sections + ['- ' + ('Weekday' if is_weekday else 'Weekend')] %}
            {% set ns.sections = ns.sections + [''] %}
            
            {# Weather section (always include) #}
            {% if hourly_forecast %}
              {% set weather_condition = hourly_forecast['weather.forecast_home'].forecast[0].condition %}
              {% set ns.sections = ns.sections + ['Current weather: ' + weather_condition] %}
            {% endif %}
            
            {# Commute section (weekday mornings only) #}
            {% if commute_data.get('relevant', false) %}
              {% set ns.sections = ns.sections + ['Commute times:'] %}
              {% if commute_data.get('brian_time') != 'N/A' and commute_data.get('brian_time') %}
                {% set ns.sections = ns.sections + ['- Brian to work: ' + commute_data.brian_time + ' minutes'] %}
              {% endif %}
              {% if commute_data.get('hester_time') != 'N/A' and commute_data.get('hester_time') %}
                {% set ns.sections = ns.sections + ['- Hester to work: ' + commute_data.hester_time + ' minutes'] %}
              {% endif %}
            {% endif %}
            
            {# Calendar events (non-garbage) with explicit dates #}
            {% if calendar_data.get('events', []) %}
              {% set ns.sections = ns.sections + ['Upcoming events:'] %}
              {% for event in calendar_data.events %}
                {% if event.is_timed %}
                  {% if event.is_today %}
                    {% set ns.sections = ns.sections + ['- TODAY: ' + event.summary + ' at ' + event.formatted_time] %}
                  {% else %}
                    {% set ns.sections = ns.sections + ['- ' + event.formatted_date + ': ' + event.summary + ' at ' + event.formatted_time] %}
                  {% endif %}
                {% else %}
                  {% if event.is_today %}
                    {% set ns.sections = ns.sections + ['- TODAY: ' + event.summary + ' (all day)'] %}
                  {% else %}
                    {% set ns.sections = ns.sections + ['- ' + event.formatted_date + ': ' + event.summary + ' (all day)'] %}
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
            
            {# Garbage reminders (separate logic) #}
            {% if garbage_data.get('relevant', false) %}
              {% set ns.sections = ns.sections + [garbage_data.get('reminder_message', '')] %}
            {% endif %}
            
            {# Meal planning #}
            {% if meals_data.get('has_today', false) or meals_data.get('has_tomorrow', false) %}
              {% set ns.sections = ns.sections + ['Meal planning:'] %}
              {% if meals_data.get('has_today', false) and meals_data.get('today') %}
                {% set today_meals = meals_data.today %}
                {% for meal_type, meal in today_meals.items() %}
                  {% set ns.sections = ns.sections + ['- Today ' + meal_type + ': ' + meal] %}
                {% endfor %}
              {% endif %}
              {% if meals_data.get('has_tomorrow', false) and meals_data.get('tomorrow') %}
                {% set tomorrow_meals = meals_data.tomorrow %}
                {% for meal_type, meal in tomorrow_meals.items() %}
                  {% set ns.sections = ns.sections + ['- Tomorrow ' + meal_type + ': ' + meal] %}
                {% endfor %}
              {% endif %}
            {% endif %}
            
            {# Chores (context aware) #}
            {% if chores_data and chores_data.get('daily') %}
              {% set ns_chores = namespace(chore_items=[]) %}
              
              {# Daily dishwasher (always relevant) #}
              {% if chores_data.daily.get('dishwasher', {}).get('relevant', false) and not chores_data.daily.get('dishwasher', {}).get('completed', false) %}
                {% set ns_chores.chore_items = ns_chores.chore_items + [chores_data.daily.dishwasher.assignee + ' needs to empty the dishwasher'] %}
              {% endif %}
              
              {# Weekend bathroom (only on weekends) #}
              {% if chores_data.get('weekend', {}).get('bathroom', {}).get('relevant', false) and not chores_data.get('weekend', {}).get('bathroom', {}).get('completed', false) %}
                {% set ns_chores.chore_items = ns_chores.chore_items + [chores_data.weekend.bathroom.assignee + ' needs to clean the bathroom'] %}
              {% endif %}
              
              {% if ns_chores.chore_items %}
                {% set ns.sections = ns.sections + ['Chores:'] %}
                {% for item in ns_chores.chore_items %}
                  {% set ns.sections = ns.sections + ['- ' + item] %}
                {% endfor %}
              {% endif %}
            {% endif %}
            
            {# Appliance maintenance (only when relevant) #}
            {% if appliances_data.get('dishwasher', {}).get('maintenance', {}).get('relevant', false) %}
              {% set ns.sections = ns.sections + ['Dishwasher maintenance needed:'] %}
              {% if appliances_data.dishwasher.maintenance.get('needs_salt', false) %}
                {% set ns.sections = ns.sections + ['- Needs salt refill'] %}
              {% endif %}
              {% if appliances_data.dishwasher.maintenance.get('needs_rinse_aid', false) %}
                {% set ns.sections = ns.sections + ['- Needs rinse aid refill'] %}
              {% endif %}
            {% endif %}
            
            {# Device issues (only when present) #}
            {% if devices_data.get('has_issues', false) %}
              {% set ns.sections = ns.sections + ['Device issues:'] %}
              {% if devices_data.get('battery_count', 0) > 0 %}
                {% set ns.sections = ns.sections + ['- ' + devices_data.battery_count|string + ' devices with low battery'] %}
              {% endif %}
              {% if devices_data.get('offline_count', 0) > 0 %}
                {% set ns.sections = ns.sections + ['- ' + devices_data.offline_count|string + ' critical devices offline'] %}
              {% endif %}
            {% endif %}
            
            {{ ns.sections | join('\n') }}
          
          compact_prompt: "{{ prompt_sections }}"
      
      # Store the built prompt with proper JSON escaping
      - service: mqtt.publish
        data:
          topic: "home/brief/prompt"
          payload: >
            {{
              {
                "prompt": compact_prompt,
                "timestamp": now().isoformat(),
                "context": {
                  "is_morning": is_morning,
                  "is_weekday": is_weekday,
                  "has_critical_issues": devices_data.get('has_issues', false)
                }
              } | tojson
            }}
      
      # Return the prompt for immediate use
      - variables:
          result: "{{ compact_prompt }}"
