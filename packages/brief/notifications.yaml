# notifications.yaml
script:
  daily_brief:
    alias: "Daily Status Brief"
    sequence:
      - variables:
          weather_entity: weather.forecast_home
          base_prompt: >
            Instructions for generating home status briefs:

            General Guidelines:
            - Create two versions of the brief (condensed and detailed)
            - Format the detailed version in markdown for display
            - Make the condensed version conversational and brief
            - Avoid technical terms and Home Assistant terminology
            - Don't use emoji or special characters
            - Round numbers naturally (say "around 3" instead of "2.87")

            Condensed Brief Requirements:
            - Only mention events in next 4 hours
            - Only report critical device issues (dead batteries, key offline devices)
            - Only include weather that could impact immediate plans
            - Response should be close to but less than 255 characters

            Detailed Brief Requirements:
            - Use markdown formatting with headers and sections
            - Analyze weather for next 72 hours - highlight unusual conditions or overall trends
            - Report every calendar event chornologially grouped by day with weekday name included.
            - DO NOT SKIP ANY EVENTS
            - Report all day events on the day they begin, not when they end. Especially BIRTHDAYS!
            - Pay attention to time zone offsets on the calendar events.  
            - Start times are given in either 'yyyy-mm-dd' format for all day events or 'yyyy-mm-ddTHH:MM:SS(offset)"
            - Offset is either + or - hh:mm.  My home timezone will be the one associated with calendar.family events.
            - Try to report all times in my local timezone.
            - Report all device issues (batteries, offline devices)
            - For morning briefs on weekdays, include current commute time to work

            Time Context:
            - Current time: {{ now().strftime("%H:%M") }}
            - If mentioning times, use conversational format ("in about 2 hours" rather than "at 14:30")

      # Get weather forecast
      - service: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: "{{ weather_entity }}"
        response_variable: daily_forecast

      # Get calendar events
      - service: calendar.get_events
        data:
          duration:
            days: 3
        target:
          label_id: brief
        response_variable: events_response

      # Get commute information
      - variables:
          commute_info: >
            {% if now().weekday() | int < 5 and now().hour | int < 10 %}
              {{ { 
                'commute_time': states('sensor.travel_time_to_brian_s_work'),
                'is_workday': true
              } | tojson }}
            {% else %}
              {{ { 'is_workday': false } | tojson }}
            {% endif %}

      # Process weather data
      - variables:
          processed_weather: "{{ daily_forecast | tojson }}"
      #
      # Get device issues
      - variables:
          device_issues: >
            {% set issues = namespace(batteries=[], offline=[], critical=[]) %}

            {# Check battery levels in attributes #}
            {% for entity in states if entity.attributes.battery_level is defined %}
              {% set raw_level = entity.attributes.battery_level %}
              {% set level = raw_level | float(-1) | int %}
              {% if level >= 0 %}
                {% if level <= 20 %}
                  {% set issues.batteries = issues.batteries + [
                    {'device': entity.name,
                     'level': level,
                     'is_critical': level <= 10}
                  ] %}
                  {% if level <= 10 %}
                    {% set issues.critical = issues.critical + [
                      {'type': 'battery',
                       'device': entity.name,
                       'details': 'Battery at ' ~ level ~ '%'}
                    ] %}
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {# Check battery levels in attributes #}
            {% for entity in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
              {% if 0 <= entity.state | int <= 30 %}
                {% set issues.batteries = issues.batteries + [
                  {'device': entity.name,
                    'level': entity.state,
                    'is_critical': entity.state | int <= 10}
                 ] %}
                {% if entity.state | int <= 10 %}
                  {% set issues.critical = issues.critical + [
                    {'type': 'battery',
                     'device': entity.name,
                     'details': 'Battery at ' ~ entity.state ~ '%'}
                  ] %}
                {% endif %}
              {% endif %}
            {% endfor %}


            {# Check offline devices #}
            {% set critical_devices = ['camera', 'alarm_control_panel', 'lock'] %}
            {% for entity in states if entity.state == 'unavailable' %}
              {% if entity.domain in critical_devices %}
                {% set issues.critical = issues.critical + [
                  {'type': 'offline',
                   'device': entity.name,
                   'details': 'Critical device offline'}
                ] %}
              {% endif %}
            {% endfor %}

            {{ {
              'batteries': issues.batteries | list,
              'critical': issues.critical | list
            } | tojson }}

      # Process everything with AI - now requesting both versions
      - service: conversation.process
        data:
          agent_id: conversation.google_generative_ai
          text: |-
            Generate two versions of the brief (condensed and detailed) based on:

            Context Data:
            {
              "currentTime": "{{ now().strftime("%Y-%m-%d %H:%M") }}",
              "timeOfDay": "{{ 'morning' if now().hour | int < 12 else 'afternoon' if now().hour | int < 17 else 'evening' }}",
              "isWeekday": {{ (now().weekday() | int) < 5 }}
            }

            Weather Information:
            {{ processed_weather }}

            Calendar Events:
            {{ events_response | tojson }}

            Commute Information:
            {{ commute_info }}

            Device Status:
            {{ device_issues }}

            {{ base_prompt }}

            Please provide output in the following format:
            ---CONDENSED---
            [Condensed conversational brief here]
            ---DETAILED---
            [Detailed markdown-formatted brief here]
        response_variable: agent_response

      # Extract both versions
      - variables:
          condensed_brief: >
            {% set parts = agent_response.response.speech.plain.speech.split('---DETAILED---') %}
            {% set condensed = parts[0].replace('---CONDENSED---', '').strip() %}
            {{ condensed }}
          detailed_brief: >
            {% set parts = agent_response.response.speech.plain.speech.split('---DETAILED---') %}
            {% if parts|length > 1 %}
              {{ parts[1].strip() }}
            {% else %}
              {{ parts[0].strip() }}
            {% endif %}

      - service: mqtt.publish
        data:
          topic: "home/ai/response"
          payload: >
            {
              "state": "{{ now().isoformat() }}",
              "detailed_brief": {{ detailed_brief | tojson }},
              "condensed_brief": {{ condensed_brief | tojson }}
            }

      # Send notification with both action buttons
      - service: notify.mobile_app_pixel_7_pro
        data:
          title: "Home Brief"
          message: "{{ condensed_brief }}"
          data:
            actions:
              - action: "PLAY_TTS"
                title: "Play Extended Brief"
              - action: "EMAIL_BRIEF"
                title: "Email Full Brief"
