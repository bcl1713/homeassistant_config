# packages/brief/data_collectors.yaml
#
# Data Collectors for Modular Briefing System
# Each collector focuses on gathering specific types of information

script:
  brief_collect_chores:
    alias: "Collect Chores information"
    description: "Gathers current chore status with context-aware filtering"
    variables:
      is_weekend: "{{ is_state('binary_sensor.time_is_weekend', 'on') }}"
      dishwasher_assignee: "{{ states('input_select.chore_dishwasher_assignee') }}"
      dishwaher_completed: "{{ is_state('input_boolean.chore_dishwasher_completed', 'on') }}"
      bathroom_assignee: "{{ states('input_select.chore_bathroom_assignee') }}"
      bathroom_completed: "{{ is_state('input_boolean.chore_bathroom_completed', 'on') }}"
    sequence:
      - variables:
          chores_data:
            daily:
              dishwasher:
                assignee: "{{ dishwasher_assignee }}"
                completed: "{{ dishwaher_completed }}"
                relevant: true
            weekend:
              bathroom:
                assignee: "{{ bathroom_assignee }}"
                completed: "{{ bathroom_completed }}"
                relevant: "{{ is_weekend }}"
      - service: mqtt.publish
        data:
          topic: "home/brief/data/chores"
          payload: "{{ chores_data | tojson }}"

  brief_collect_appliances:
    alias: "Collect Appliance Status"
    description: "Gathers appliance information with intelligent filtering"
    variables:
      dishwasher_state: "{{ states('sensor.dishwasher_operation_state') }}"
      needs_salt: "{{ is_state('sensor.dishwasher_salt_nearly_empty', 'present') }}"
      needs_rinse_aid: " {{is_state('sensor.dishwasher_rinse_aid_nearly_empty', 'present') }}"
    sequence:
      - variables:
          appliance_data:
            dishwasher:
              state: "{{ dishwasher_state }}"
              maintenance:
                needs_salt: "{{ needs_salt }}"
                needs_rinse_aid: "{{ needs_rinse_aid }}"
                relevant: "{{ needs_salt or needs_rinse_aid }}"
      - service: mqtt.publish
        data:
          topic: "home/brief/data/appliances"
          payload: "{{ appliance_data | tojson }}"

  brief_collect_calendar:
    alias: "Collect Calendar Information"
    description: "Gathers relevant calendar events"
    sequence:
      # Get calendar events for next 3 days
      - service: calendar.get_events
        data:
          duration:
            days: 3
        target:
          label_id: brief
        response_variable: raw_events
      
      - variables:
          today: "{{ now().date() }}"
          processed_events: >
            {% set events = [] %}
            {% for calendar, event_list in raw_events.items() %}
              {% for event in event_list.events %}
                {{ calendar.split('.')[1] + " " + event.summary }}
                {% if 'T' in event.start %}
                  {# Timed event - has time component #}
                  {% set event_datetime = strptime(event.start.split('T')[0] + 'T' + event.start.split('T')[1].split('-')[0].split('+')[0], '%Y-%m-%dT%H:%M:%S') %}
                  {% set event_date = event_datetime.date() %}
                {% else %}
                  {# All-day event - just date #}
                  {% set event_date = strptime(event.start, '%Y-%m-%d').date() %}
                  {% set event_datetime = none %}
                {% endif %}
                {% set events = events + [{
                  'summary': event.summary,
                  'start': event.start,
                  'date': event_date.isoformat(),
                  'is_today': event_date == today,
                  'is_timed': event_datetime is not none,
                  'formatted_time': event_datetime.strftime('%H:%M') if event_datetime else 'All day'
                }] %}
              {% endfor %}
            {% endfor %}
      
      - service: mqtt.publish
        data:
          topic: "home/brief/data/calendar"
          payload: "{{ {'events': processed_events} | tojson }}"
