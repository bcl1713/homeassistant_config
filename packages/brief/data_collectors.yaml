# packages/brief/data_collectors.yaml
#
# Data Collectors for Modular Briefing System
# Each collector focuses on gathering specific types of information

script:
  brief_collect_chores:
    alias: "Collect Chores information"
    description: "Gathers current chore status with context-aware filtering"
    variables:
      is_weekend: "{{ is_state('binary_sensor.time_is_weekend', 'on') }}"
      dishwasher_assignee: "{{ states('input_select.chore_dishwasher_assignee') }}"
      dishwaher_completed: "{{ is_state('input_boolean.chore_dishwasher_completed', 'on') }}"
      bathroom_assignee: "{{ states('input_select.chore_bathroom_assignee') }}"
      bathroom_completed: "{{ is_state('input_boolean.chore_bathroom_completed', 'on') }}"
    sequence:
      - variables:
          chores_data:
            daily:
              dishwasher:
                assignee: "{{ dishwasher_assignee }}"
                completed: "{{ dishwaher_completed }}"
                relevant: true
            weekend:
              bathroom:
                assignee: "{{ bathroom_assignee }}"
                completed: "{{ bathroom_completed }}"
                relevant: "{{ is_weekend }}"
      - service: mqtt.publish
        data:
          topic: "home/brief/data/chores"
          payload: "{{ chores_data | tojson }}"

  brief_collect_appliances:
    alias: "Collect Appliance Status"
    description: "Gathers appliance information with intelligent filtering"
    variables:
      dishwasher_state: "{{ states('sensor.dishwasher_operation_state') }}"
      needs_salt: "{{ is_state('sensor.dishwasher_salt_nearly_empty', 'present') }}"
      needs_rinse_aid: " {{is_state('sensor.dishwasher_rinse_aid_nearly_empty', 'present') }}"
    sequence:
      - variables:
          appliance_data:
            dishwasher:
              state: "{{ dishwasher_state }}"
              maintenance:
                needs_salt: "{{ needs_salt }}"
                needs_rinse_aid: "{{ needs_rinse_aid }}"
                relevant: "{{ needs_salt or needs_rinse_aid }}"
      - service: mqtt.publish
        data:
          topic: "home/brief/data/appliances"
          payload: "{{ appliance_data | tojson }}"

  brief_collect_calendar:
    alias: "Collect Calendar Information"
    description: "Gathers relevant calendar events"
    sequence:
      # Get calendar events for next 3 days
      - service: calendar.get_events
        data:
          duration:
            days: 3
        target:
          label_id: brief
        response_variable: raw_events
      
      - variables:
          today: "{{ now().date() }}"
          processed_events: >
            {% set ns = namespace(items=[]) %}
            {% for calendar, event_list in raw_events.items() %}
              {% for event in event_list.events %}
                {% set calendar = calendar.split('.')[1] | replace('_', ' ') | title %}
                {% if 'T' in event.start %}
                  {# Timed event - has time component #}
                  {% set event_datetime = strptime(event.start.split('T')[0] + 'T' + event.start.split('T')[1].split('-')[0].split('+')[0], '%Y-%m-%dT%H:%M:%S') %}
                  {% set event_date = event_datetime.date() %}
                {% else %}
                  {# All-day event - just date #}
                  {% set event_date = strptime(event.start, '%Y-%m-%d').date() %}
                  {% set event_datetime = none %}
                {% endif %}
                {% set ns.items = ns.items + [{
                  'calendar': calendar,
                  'summary': event.summary,
                  'start': event.start,
                  'date': event_date.isoformat(),
                  'is_today': event_date == today,
                  'is_timed': event_datetime is not none,
                  'formatted_time': event_datetime.strftime('%H:%M') if event_datetime else 'All day'
                }] %}
              {% endfor %}
            {% endfor %}
            {{ ns.items }}

      - service: mqtt.publish
        data:
          topic: "home/brief/data/calendar"
          payload: "{{ {'events': processed_events} | tojson }}"

  brief_collect_garbage:
    alias: "Collect Garbage Schedule"
    description: "Reminds to take ou the trash the night before garbage day"
    sequence:
      # Get calendar events for next 3 days
      - service: calendar.get_events
        data:
          duration:
            days: 3
        target:
          label_id: trash_calendar
        response_variable: raw_events
      
      - variables:
          today: "{{ now().date() }}"
          tomorrow: "{{ (now() + timedelta(days=1)).date() }}"
          is_evening: "{{ now().hour >= 17 }}"
          garbage_tomorrow: >
            {% set ns = namespace(garbage_events=[]) %}
            {% for calendar, event_list in raw_events.items() %}
              {% for event in event_list.events %}
                {% set event_date = strptime(event.start, '%Y-%m-%d').date() %}
                {% if (event_date | string)  == (tomorrow | string) %}
                  {% set ns.garbage_events = ns.garbage_events + [{
                    'summary': event.summary,
                    'date': event_date.isoformat(),
                    'type': 'garbage_and_recycling' if 'recycling' in event.summary.lower() else 'garbage_only'
                  }] %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            {{ ns.garbage_events }}
          garbage_data:
            has_pickup_tomorrow: "{{ garbage_tomorrow | length > 0 }}"
            pickup_events: "{{ garbage_tomorrow }}"
            relevant: >
              {% set has_pickup = garbage_tomorrow | length > 0 %}
              {% set time_to_remind = is_evening or now().hour >= 20 %}
              {{ has_pickup and time_to_remind }}
            reminder_message: >
              {% if garbage_tomorrow | length > 0 %}
                {% set event = garbage_tomorrow[0] %}
                {% if event.type == 'garbage_and_recycling' %}
                  Remember to take out garbage and recycling tonight
                {% else %}
                  Remember to take out garbage tonight
                {% endif %}
              {% else %}
                ""
              {% endif %}
      - service: mqtt.publish
        data:
          topic: "home/brief/data/garbage"
          payload: "{{ garbage_data | tojson }}"

  brief_collect_meals:
    alias: "Collect Meal Planning"
    description: "Gathers today and tomorrow's meal plans when available"
    sequence:
      # Get today's meals
      - service: calendar.get_events
        data:
          start_date_time: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0).isoformat() }}"
          end_date_time: "{{ now().replace(hour=23, minute=59, second=59, microsecond=0).isoformat() }}"
        target:
          entity_id: 
            - calendar.mealie_breakfast
            - calendar.mealie_lunch  
            - calendar.mealie_dinner
        response_variable: today_meals
      
      # Get tomorrow's meals
      - service: calendar.get_events
        data:
          start_date_time: "{{ (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0).isoformat() }}"
          end_date_time: "{{ (now() + timedelta(days=1)).replace(hour=23, minute=59, second=59, microsecond=0).isoformat() }}"
        target:
          entity_id: 
            - calendar.mealie_breakfast
            - calendar.mealie_lunch  
            - calendar.mealie_dinner
        response_variable: tomorrow_meals
      
      - variables:
          meal_data:
            today: >
              {% set ns = namespace(meals={}) %}
              {% for calendar, event_list in today_meals.items() %}
                {% set meal_type = calendar.split('_')[-1] %}
                {% if event_list.events %}
                  {% set ns.meals = dict(ns.meals, **{meal_type: event_list.events[0].summary}) %}
                {% endif %}
              {% endfor %}
              {{ ns.meals }}
            tomorrow: >
              {% set ns = namespace(meals={}) %}
              {% for calendar, event_list in tomorrow_meals.items() %}
                {% set meal_type = calendar.split('_')[-1] %}
                {% if event_list.events %}
                  {% set ns.meals = dict(ns.meals, **{meal_type: event_list.events[0].summary}) %}
                {% endif %}
              {% endfor %}
              {{ ns.meals }}
            has_today: "{{ today_meals.values() | map(attribute='events') | map('length') | sum > 0 }}"
            has_tomorrow: "{{ tomorrow_meals.values() | map(attribute='events') | map('length') | sum > 0 }}"
      
      - service: mqtt.publish
        data:
          topic: "home/brief/data/meals"
          payload: "{{ meal_data | tojson }}"

  brief_collect_devices:
    alias: "Collect Device Status"
    description: "Gathers critical device issues with intelligent filtering"
    variables:
      battery_threshold: 15
      critical_domains: ['camera', 'alarm_control_panel', 'lock', 'binary_sensor']
    sequence:
      - variables:
          critical_batteries: >
            {% set ns = namespace(batteries=[]) %}
            {% for entity in states if entity.attributes.battery_level is defined %}
              {% set level = entity.attributes.battery_level | float(-1) | int %}
              {% if level >= 0 and level <= battery_threshold %}
                {% set ns.batteries = ns.batteries + [{
                  'entity_id': entity.entity_id,
                  'name': entity.name or entity.entity_id,
                  'level': level
                }] %}
              {% endif %}
            {% endfor %}
            {% for entity in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
              {% if 0 <= entity.state | int <= battery_threshold %}
                {% set ns.batteries = ns.batteries + [{
                  'entity_id': entity.entity_id,
                  'name': entity.name or entity.entity_id,
                  'level': entity.state | int
                }] %}
              {% endif %}
            {% endfor %}
            {{ ns.batteries }}
          
          offline_devices: >
            {% set ns = namespace(devices=[]) %}
            {% for entity in states if entity.state == 'unavailable' %}
              {% if entity.domain in critical_domains %}
                {% set ns.devices = ns.devices + [{
                  'entity_id': entity.entity_id,
                  'name': entity.name or entity.entity_id,
                  'domain': entity.domain
                }] %}
              {% endif %}
            {% endfor %}
            {{ ns.devices }}
          
          device_data:
            critical_batteries: "{{ critical_batteries }}"
            offline_devices: "{{ offline_devices }}"
            has_issues: "{{ (critical_batteries | length) + (offline_devices | length) > 0 }}"
            battery_count: "{{ critical_batteries | length }}"
            offline_count: "{{ offline_devices | length }}"
      
      - service: mqtt.publish
        data:
          topic: "home/brief/data/devices"
          payload: "{{ device_data | tojson }}"
