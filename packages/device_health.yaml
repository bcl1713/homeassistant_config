# packages/device_health.yaml
#
# Device Health Monitoring Package
#
# Features:
# - Enhanced battery monitoring with proactive alerts
# - Device health trend analysis
# - Maintenance scheduling and tracking
# - Integration with existing brief system
#
# This package enhances the existing brief system's device monitoring
# without breaking existing functionality.

homeassistant:
  customize:
    package.node_anchors:
      critical_battery_threshold: &critical_threshold 15
      warning_battery_threshold: &warning_threshold 25
      low_battery_threshold: &low_threshold 5

input_boolean:
  device_health_monitoring_enabled:
    name: "Device Health Monitoring"
    icon: mdi:heart-pulse
    initial: true

  device_health_proactive_alerts:
    name: "Proactive Battery Alerts"
    icon: mdi:battery-alert
    initial: true

  device_health_critical_alert_sent:
    name: "Critical Battery Alert Status"
    icon: mdi:battery-10
    initial: false

input_number:
  device_health_critical_threshold:
    name: "Critical Battery Threshold"
    min: 5
    max: 75
    step: 1
    unit_of_measurement: "%"
    icon: mdi:battery-20
    initial: *critical_threshold

  device_health_warning_threshold:
    name: "Warning Battery Threshold"
    min: 10
    max: 50
    step: 5
    unit_of_measurement: "%"
    icon: mdi:battery-30
    initial: *warning_threshold

  device_health_low_threshold:
    name: "Low Battery Threshold"
    min: 1
    max: 10
    step: 1
    unit_of_measurement: "%"
    icon: mdi:battery-alert-variant-outline
    initial: *low_threshold

template:
  - sensor:
      - name: "Real-time Battery Levels"
        unique_id: realtime_battery_levels
        state: >
          {% set ns = namespace(batteries=[]) %}
          
          {# Simplified discovery logic for state calculation #}
          {% for entity in states if entity.attributes.battery_level is defined %}
            {% set level = entity.attributes.battery_level | float(-1) | int %}
            {% if level >= 0 %}
              {% set ns.batteries = ns.batteries + [{'entity_id': entity.entity_id, 'level': level}] %}
            {% endif %}
          {% endfor %}
          
          {% for entity in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
            {% if entity.state | string | regex_match('^[0-9.]+$') %}
              {% set level = entity.state | int %}
              {% if 0 <= level <= 100 %}
                {% if not entity.entity_id.startswith('sensor.device_health_') and 
                      entity.entity_id != 'sensor.real_time_battery_levels' %}
                  {% set already_included = ns.batteries | selectattr('entity_id', '==', entity.entity_id) | list | length > 0 %}
                  {% if not already_included %}
                    {% set ns.batteries = ns.batteries + [{'entity_id': entity.entity_id, 'level': level}] %}
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endif %}
          {% endfor %}
          
          {{ ns.batteries | length }}
        unit_of_measurement: "devices"
        attributes:
          batteries: >
            {% set ns = namespace(batteries=[]) %}
            
            {# Method 1: Entities with battery_level attribute #}
            {% for entity in states if entity.attributes.battery_level is defined %}
              {% set level = entity.attributes.battery_level | float(-1) | int %}
              {% if level >= 0 %}
                {% set device_name = entity.name or entity.entity_id %}
                {% set friendly_name = device_name.replace('_', ' ').title() %}
                {% set ns.batteries = ns.batteries + [{
                  'entity_id': entity.entity_id,
                  'name': friendly_name,
                  'level': level,
                  'source': 'battery_level_attr',
                  'domain': entity.domain,
                  'unit': '%',
                  'icon': 'mdi:battery-' + (
                    '10' if level <= 10 else
                    '20' if level <= 20 else
                    '30' if level <= 30 else
                    '40' if level <= 40 else
                    '50' if level <= 50 else
                    '60' if level <= 60 else
                    '70' if level <= 70 else
                    '80' if level <= 80 else
                    '90' if level <= 90 else
                    ''
                  ),
                  'state_class': 'measurement',
                  'device_class': 'battery',
                  'last_updated': entity.last_updated or 'unknown',
                  'is_charging': entity.attributes.get('is_charging', false),
                  'health': entity.attributes.get('battery_health', 'unknown'),
                  'cycle_count': entity.attributes.get('battery_cycle_count', 'unknown')
                }] %}
              {% endif %}
            {% endfor %}
            
            {# Method 2: Battery device class sensors #}
            {% for entity in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
              {% if entity.state | string | regex_match('^[0-9.]+$') %}
                {% set level = entity.state | int %}
                {% if 0 <= level <= 100 %}
                  {# Skip our own device_health sensors and this sensor to avoid circular reference #}
                  {% if not entity.entity_id.startswith('sensor.device_health_') and 
                        entity.entity_id != 'sensor.real_time_battery_levels' %}
                    {# Check if we already have this entity from previous methods #}
                    {% set already_included = ns.batteries | selectattr('entity_id', '==', entity.entity_id) | list | length > 0 %}
                    {% if not already_included %}
                      {% set device_name = entity.name or entity.entity_id %}
                      {% set friendly_name = device_name.replace('_', ' ').title() %}
                      {% set ns.batteries = ns.batteries + [{
                        'entity_id': entity.entity_id,
                        'name': friendly_name,
                        'level': level,
                        'source': 'battery_sensor',
                        'domain': entity.domain,
                        'unit': '%',
                        'icon': 'mdi:battery-' + (
                          '10' if level <= 10 else
                          '20' if level <= 20 else
                          '30' if level <= 30 else
                          '40' if level <= 40 else
                          '50' if level <= 50 else
                          '60' if level <= 60 else
                          '70' if level <= 70 else
                          '80' if level <= 80 else
                          '90' if level <= 90 else
                          ''
                        ),
                        'state_class': 'measurement',
                        'device_class': 'battery',
                        'last_updated': entity.last_updated or 'unknown',
                        'is_charging': entity.attributes.get('is_charging', false),
                        'health': entity.attributes.get('battery_health', 'unknown'),
                        'cycle_count': entity.attributes.get('battery_cycle_count', 'unknown')
                      }] %}
                    {% endif %}
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endfor %}
            
            {# Method 3: Auto-discovery by entity naming patterns (excluding our own sensors) #}
            {% for entity in states.sensor %}
              {% set entity_lower = entity.entity_id | lower %}
              {% if 'battery' in entity_lower and entity.state | string | regex_match('^[0-9.]+$') %}
                {% if not entity.entity_id.startswith('sensor.device_health_') and 
                      entity.entity_id != 'sensor.real_time_battery_levels' %}
                  {% set level = entity.state | int %}
                  {% if 0 <= level <= 100 %}
                    {# Check if we already have this entity from previous methods #}
                    {% set already_included = ns.batteries | selectattr('entity_id', '==', entity.entity_id) | list | length > 0 %}
                    {% if not already_included %}
                      {% set device_name = entity.name or entity.entity_id %}
                      {% set friendly_name = device_name.replace('_', ' ').title() %}
                      {% set ns.batteries = ns.batteries + [{
                        'entity_id': entity.entity_id,
                        'name': friendly_name,
                        'level': level,
                        'source': 'name_pattern',
                        'domain': entity.domain,
                        'unit': '%',
                        'icon': 'mdi:battery-' + (
                          '10' if level <= 10 else
                          '20' if level <= 20 else
                          '30' if level <= 30 else
                          '40' if level <= 40 else
                          '50' if level <= 50 else
                          '60' if level <= 60 else
                          '70' if level <= 70 else
                          '80' if level <= 80 else
                          '90' if level <= 90 else
                          ''
                        ),
                        'state_class': 'measurement',
                        'device_class': 'battery',
                        'last_updated': entity.last_updated or 'unknown',
                        'is_charging': entity.attributes.get('is_charging', false),
                        'health': entity.attributes.get('battery_health', 'unknown'),
                        'cycle_count': entity.attributes.get('battery_cycle_count', 'unknown')
                      }] %}
                    {% endif %}
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endfor %}
            
            {# Remove duplicates and sort by battery level (lowest first) #}
            {% set unique_batteries = ns.batteries | groupby('entity_id') | map('last') | map('first') | list %}
            {{ unique_batteries | sort(attribute='level') }}
          
          total_count: >
            {% set batteries = state_attr('sensor.real_time_battery_levels', 'batteries') %}
            {% if batteries and batteries is iterable and batteries is not string %}
              {{ batteries | length }}
            {% else %}
              0
            {% endif %}
          
          critical_count: >
            {% set batteries = state_attr('sensor.real_time_battery_levels', 'batteries') %}
            {% set threshold = states('input_number.device_health_critical_threshold') | int(15) %}
            {% if batteries and batteries is iterable and batteries is not string %}
              {% set critical = [] %}
              {% for battery in batteries %}
                {% if battery is mapping and battery.level is defined and battery.level <= threshold %}
                  {% set critical = critical + [battery] %}
                {% endif %}
              {% endfor %}
              {{ critical | length }}
            {% else %}
              0
            {% endif %}
          
          warning_count: >
            {% set batteries = state_attr('sensor.real_time_battery_levels', 'batteries') %}
            {% set threshold = states('input_number.device_health_warning_threshold') | int(25) %}
            {% if batteries and batteries is iterable and batteries is not string %}
              {% set warning = [] %}
              {% for battery in batteries %}
                {% if battery is mapping and battery.level is defined and battery.level <= threshold %}
                  {% set warning = warning + [battery] %}
                {% endif %}
              {% endfor %}
              {{ warning | length }}
            {% else %}
              0
            {% endif %}
          
          charging_count: >
            {% set batteries = state_attr('sensor.real_time_battery_levels', 'batteries') %}
            {% if batteries and batteries is iterable and batteries is not string %}
              {% set charging = [] %}
              {% for battery in batteries %}
                {% if battery is mapping and battery.is_charging is defined and battery.is_charging %}
                  {% set charging = charging + [battery] %}
                {% endif %}
              {% endfor %}
              {{ charging | length }}
            {% else %}
              0
            {% endif %}
          
          lowest_battery: >
            {% set batteries = state_attr('sensor.real_time_battery_levels', 'batteries') %}
            {% if batteries and batteries is iterable and batteries is not string and batteries | length > 0 %}
              {% set lowest_level = 999 %}
              {% set lowest_name = "" %}
              {% for battery in batteries %}
                {% if battery is mapping and battery.level is defined and battery.level < lowest_level %}
                  {% set lowest_level = battery.level %}
                  {% set lowest_name = battery.name %}
                {% endif %}
              {% endfor %}
              {% if lowest_name %}
                {{ lowest_name }}: {{ lowest_level }}%
              {% else %}
                "No valid batteries found"
              {% endif %}
            {% else %}
              "No batteries found"
            {% endif %}
          
          last_updated: "{{ now().isoformat() }}"

      - name: "Device Health Battery Summary"
        unique_id: device_health_battery_summary
        state: >
          {% set device_data = state_attr('sensor.brief_data_devices', 'battery_summary') %}
          {% if device_data %}
            {{ device_data.total_discovered }}
          {% else %}
            0
          {% endif %}
        attributes:
          total_batteries: >
            {% set device_data = state_attr('sensor.brief_data_devices', 'battery_summary') %}
            {{ device_data.total_discovered if device_data else 0 }}
          critical_count: >
            {% set devices = state_attr('sensor.brief_data_devices', 'critical_batteries') %}
            {{ devices | length if devices else 0 }}
          warning_count: >
            {% set devices = state_attr('sensor.brief_data_devices', 'critical_batteries') %}
            {% set warning_threshold = states('input_number.device_health_warning_threshold') | int %}
            {% if devices %}
              {{ devices | selectattr('level', '<=', warning_threshold) | list | length }}
            {% else %}
              0
            {% endif %}
          lowest_battery: >
            {% set device_data = state_attr('sensor.brief_data_devices', 'battery_summary') %}
            {% if device_data and device_data.lowest_battery %}
              {{ device_data.lowest_battery.name }}: {{ device_data.lowest_battery.level }}%
            {% else %}
              "All batteries healthy"
            {% endif %}
          charging_devices: >
            {% set device_data = state_attr('sensor.brief_data_devices', 'battery_summary') %}
            {% if device_data and device_data.charging_devices %}
              {{ device_data.charging_devices | map(attribute='name') | list | join(', ') }}
            {% else %}
              "None"
            {% endif %}

      - name: "Device Health Critical Devices"
        unique_id: device_health_critical_devices
        state: >
          {% set devices = state_attr('sensor.brief_data_devices', 'critical_batteries') %}
          {% set critical_threshold = states('input_number.device_health_critical_threshold') | int %}
          {% if devices %}
            {% set critical_devices = devices | selectattr('level', '<=', critical_threshold) | list %}
            {{ critical_devices | length }}
          {% else %}
            0
          {% endif %}
        attributes:
          devices: >
            {% set devices = state_attr('sensor.brief_data_devices', 'critical_batteries') %}
            {% set critical_threshold = states('input_number.device_health_critical_threshold') | int %}
            {% if devices %}
              {% set critical_devices = devices | selectattr('level', '<=', critical_threshold) | list %}
              {{ critical_devices }}
            {% else %}
              []
            {% endif %}
          domains_affected: >
            {% set devices = state_attr('sensor.brief_data_devices', 'critical_batteries') %}
            {% set critical_threshold = states('input_number.device_health_critical_threshold') | int %}
            {% if devices %}
              {% set critical_devices = devices | selectattr('level', '<=', critical_threshold) | list %}
              {% set domains = critical_devices | map(attribute='domain') | unique | list %}
              {{ domains | join(', ') }}
            {% else %}
              "None"
            {% endif %}

  - binary_sensor:
      - name: "Device Health Has Critical Batteries"
        unique_id: device_health_has_critical_batteries
        state: >
          {{ states('sensor.device_health_critical_devices') | int > 0 }}
        device_class: problem

      - name: "Device Health Has Low Batteries"
        unique_id: device_health_has_low_batteries
        state: >
          {% set devices = state_attr('sensor.brief_data_devices', 'critical_batteries') %}
          {% set low_threshold = states('input_number.device_health_low_threshold') | int %}
          {% if devices %}
            {% set low_devices = devices | selectattr('level', '<=', low_threshold) | list %}
            {{ low_devices | length > 0 }}
          {% else %}
            false
          {% endif %}
        device_class: problem

automation:
  - alias: "device_health_critical_battery_alert"
    id: "device_health_critical_battery_alert"
    description: "Alert when batteries reach critical levels (15% default)"
    trigger:
      - platform: state
        entity_id: binary_sensor.device_health_has_critical_batteries
        to: "on"
        for:
          minutes: 5  # Wait 5 minutes to avoid false alarms
    condition:
      - condition: state
        entity_id: input_boolean.device_health_monitoring_enabled
        state: "on"
      - condition: state
        entity_id: input_boolean.device_health_proactive_alerts
        state: "on"
      - condition: state
        entity_id: input_boolean.device_health_critical_alert_sent
        state: "off"
    action:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.device_health_critical_alert_sent
      
      - variables:
          critical_devices: "{{ state_attr('sensor.device_health_critical_devices', 'devices') }}"
          device_count: "{{ critical_devices | length }}"
          device_names: "{{ critical_devices | map(attribute='name') | list | join(', ') }}"
          lowest_level: "{{ critical_devices | map(attribute='level') | min }}"
      
      - service: notify.all_mobile_devices
        data:
          title: "Critical Battery Alert"
          message: >
            {{ device_count }} device{{ 's' if device_count > 1 else '' }} 
            ha{{ 's' if device_count == 1 else 've' }} critical battery levels.
            Lowest: {{ lowest_level }}%. Devices: {{ device_names }}
          data:
            tag: "device-health-critical"
            priority: "high"
            ttl: 0
            actions:
              - action: "device_health_view_details"
                title: "View Details"
              - action: "device_health_snooze"
                title: "Snooze 2hrs"
              - action: "device_health_dismiss"
                title: "Dismiss"

  - alias: "device_health_low_battery_alert"
    id: "device_health_low_battery_alert"
    description: "Urgent alert when batteries reach very low levels (5% default)"
    trigger:
      - platform: state
        entity_id: binary_sensor.device_health_has_low_batteries
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.device_health_monitoring_enabled
        state: "on"
    action:
      - variables:
          devices: "{{ state_attr('sensor.brief_data_devices', 'critical_batteries') }}"
          low_threshold: "{{ states('input_number.device_health_low_threshold') | int }}"
          low_devices: >
            {% if devices %}
              {{ devices | selectattr('level', '<=', low_threshold) | list }}
            {% else %}
              []
            {% endif %}
          device_count: "{{ low_devices | length }}"
          device_names: "{{ low_devices | map(attribute='name') | list | join(', ') }}"
      
      - service: notify.all_mobile_devices
        data:
          title: "🚨 URGENT: Battery Nearly Dead"
          message: >
            {{ device_count }} device{{ 's' if device_count > 1 else '' }} 
            at critically low battery (≤{{ low_threshold }}%).
            Replace immediately: {{ device_names }}
          data:
            tag: "device-health-urgent"
            priority: "high"
            ttl: 0
            critical: true

  - alias: "device_health_alert_reset"
    id: "device_health_alert_reset"
    description: "Reset alert flags when batteries are replaced/charged"
    trigger:
      - platform: state
        entity_id: binary_sensor.device_health_has_critical_batteries
        to: "off"
        for:
          minutes: 10
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.device_health_critical_alert_sent

  - alias: "device_health_notification_actions"
    id: "device_health_notification_actions"
    description: "Handle device health notification actions"
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: device_health_view_details
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: device_health_snooze
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: device_health_dismiss
    action:
      - choose:
          # View details action (placeholder for dashboard link)
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'device_health_view_details' }}"
            sequence:
              - service: persistent_notification.create
                data:
                  title: "Device Health Details"
                  message: >
                    Critical batteries: {{ state_attr('sensor.device_health_critical_devices', 'devices') | length }}
                    Total batteries monitored: {{ states('sensor.device_health_battery_summary') }}
                    
                    Details: {{ state_attr('sensor.device_health_critical_devices', 'devices') }}
                  notification_id: device_health_details

          # Snooze action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'device_health_snooze' }}"
            sequence:
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.device_health_critical_alert_sent
              - delay:
                  hours: 2
              # Re-check after snooze
              - if:
                  - condition: state
                    entity_id: binary_sensor.device_health_has_critical_batteries
                    state: "on"
                then:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: input_boolean.device_health_critical_alert_sent

          # Dismiss action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'device_health_dismiss' }}"
            sequence:
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.device_health_critical_alert_sent
